{
	"info": {
		"_postman_id": "dd784115-13a6-46e6-8941-a38fc04c8e77",
		"name": "Cartel Management API - Complete Collection",
		"description": "Collection compl√®te pour tester l'API Cartel avec IA Mistral int√©gr√©e",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25890074"
	},
	"item": [
		{
			"name": "üîê 1. AUTHENTIFICATION",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('authToken', response.token);",
									"    pm.collectionVariables.set('userId', response.id);",
									"    pm.test('Registration successful', function () {",
									"        pm.expect(response.token).to.not.be.empty;",
									"        pm.expect(response.username).to.exist;",
									"    });",
									"    console.log('‚úÖ User registered and token saved');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"password123\",\n  \"email\": \"test@cartel.com\",\n  \"codeName\": \"TestAgent\",\n  \"phoneNumber\": \"+1234567890\",\n  \"territory\": \"Test Territory\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('authToken', response.token);",
									"    pm.collectionVariables.set('userId', response.id);",
									"    pm.test('Admin login successful', function () {",
									"        pm.expect(response.token).to.not.be.empty;",
									"        pm.expect(response.role).to.eql('ADMIN');",
									"    });",
									"    console.log('‚úÖ Admin logged in and token saved');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('authToken', response.token);",
									"    pm.collectionVariables.set('userId', response.id);",
									"    console.log('‚úÖ User logged in and token saved');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üë• 2. GESTION UTILISATEURS",
			"item": [
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users?page=0&size=10&sortBy=username&sortDir=asc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "username"
								},
								{
									"key": "sortDir",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('‚úÖ User created with ID: ' + response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"newuser\",\n  \"password\": \"password123\",\n  \"email\": \"newuser@cartel.com\",\n  \"codeName\": \"NewAgent\",\n  \"role\": \"USER\",\n  \"phoneNumber\": \"+1234567899\",\n  \"territory\": \"New Territory\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users by Role",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/role/USER?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"role",
								"USER"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Users by Code Name",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/search?codeName=Agent&page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"search"
							],
							"query": [
								{
									"key": "codeName",
									"value": "Agent"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"codeName\": \"UpdatedAgent\",\n  \"phoneNumber\": \"+1234567888\",\n  \"territory\": \"Updated Territory\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üì¶ 3. GESTION PRODUITS",
			"item": [
				{
					"name": "Get All Products",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?page=0&size=10&sortBy=name&sortDir=asc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "name"
								},
								{
									"key": "sortDir",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('productId', response.id);",
									"    console.log('‚úÖ Product created with ID: ' + response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Premium White\",\n  \"codeName\": \"PW001\",\n  \"productType\": \"POWDER\",\n  \"description\": \"High quality white powder from premium sources\",\n  \"pricePerUnit\": 250.00,\n  \"unitMeasure\": \"gram\",\n  \"originCountry\": \"Colombia\",\n  \"purityLevel\": 95\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product by Code Name",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/code/PW001",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"code",
								"PW001"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products by Type",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/type/POWDER?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"type",
								"POWDER"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Products by Name",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/search?name=Premium&page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"search"
							],
							"query": [
								{
									"key": "name",
									"value": "Premium"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products by Price Range",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/price-range?minPrice=100&maxPrice=300",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"price-range"
							],
							"query": [
								{
									"key": "minPrice",
									"value": "100"
								},
								{
									"key": "maxPrice",
									"value": "300"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products by Origin Country",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/origin/Colombia",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"origin",
								"Colombia"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products by Minimum Purity",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/purity/90",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"purity",
								"90"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Premium White\",\n  \"description\": \"Updated high quality white powder\",\n  \"pricePerUnit\": 275.00,\n  \"purityLevel\": 98\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üéØ 4. GESTION OP√âRATIONS",
			"item": [
				{
					"name": "Get All Operations",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/operations?page=0&size=10&sortBy=createdAt&sortDir=desc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"operations"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "createdAt"
								},
								{
									"key": "sortDir",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Operation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('operationId', response.id);",
									"    console.log('‚úÖ Operation created with ID: ' + response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Operation Sunrise\",\n  \"codeName\": \"OS001\",\n  \"description\": \"Strategic expansion operation in Miami\",\n  \"leaderId\": {{userId}},\n  \"startDate\": \"2024-07-01T08:00:00\",\n  \"endDate\": \"2024-07-07T18:00:00\",\n  \"location\": \"Miami\",\n  \"riskLevel\": 6,\n  \"estimatedProfit\": 500000.00,\n  \"participantIds\": []\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/operations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"operations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Operation by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/operations/{{operationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"operations",
								"{{operationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Operations by Leader",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/operations/leader/{{userId}}?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"operations",
								"leader",
								"{{userId}}"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Operations by Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/operations/status/PLANNED?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"operations",
								"status",
								"PLANNED"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Operations by Participant",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/operations/participant/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"operations",
								"participant",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Operations by Date Range",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/operations/date-range?startDate=2024-01-01T00:00:00&endDate=2024-12-31T23:59:59",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"operations",
								"date-range"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2024-01-01T00:00:00"
								},
								{
									"key": "endDate",
									"value": "2024-12-31T23:59:59"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Active Operations by Location",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/operations/location/Miami",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"operations",
								"location",
								"Miami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get High Risk Operations",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/operations/high-risk/7",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"operations",
								"high-risk",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Operations",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/operations/search?searchTerm=Sunrise&page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"operations",
								"search"
							],
							"query": [
								{
									"key": "searchTerm",
									"value": "Sunrise"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Operation",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"IN_PROGRESS\",\n  \"riskLevel\": 7,\n  \"actualProfit\": 525000.00\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/operations/{{operationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"operations",
								"{{operationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Operation",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/operations/{{operationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"operations",
								"{{operationId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üè≠ 5. GESTION ENTREP√îTS",
			"item": [
				{
					"name": "Get All Warehouses",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/warehouses?page=0&size=10&sortBy=name",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"warehouses"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Warehouse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('warehouseId', response.id);",
									"    console.log('‚úÖ Warehouse created with ID: ' + response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Miami Storage\",\n  \"codeName\": \"MS001\",\n  \"address\": \"123 Industrial Blvd\",\n  \"city\": \"Miami\",\n  \"country\": \"USA\",\n  \"coordinates\": \"25.7617,-80.1918\",\n  \"capacity\": 10000,\n  \"securityLevel\": 8,\n  \"managerId\": {{userId}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/warehouses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"warehouses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Warehouse by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/warehouses/{{warehouseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"warehouses",
								"{{warehouseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Warehouses by City",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/warehouses/city/Miami",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"warehouses",
								"city",
								"Miami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Warehouse",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Miami Storage\",\n  \"capacity\": 15000,\n  \"securityLevel\": 9\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/warehouses/{{warehouseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"warehouses",
								"{{warehouseId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìã 6. GESTION INVENTAIRE",
			"item": [
				{
					"name": "Get All Inventory",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/inventory?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inventory"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('inventoryId', response.id);",
									"    console.log('‚úÖ Inventory created with ID: ' + response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productId\": {{productId}},\n  \"warehouseId\": {{warehouseId}},\n  \"quantity\": 500,\n  \"reservedQuantity\": 0,\n  \"minimumStockLevel\": 100\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/inventory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Inventory by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/inventory/{{inventoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inventory",
								"{{inventoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Available Inventory",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/inventory/available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inventory",
								"available"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Low Stock Inventory",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/inventory/low-stock",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inventory",
								"low-stock"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Inventory",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": 450,\n  \"reservedQuantity\": 50\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/inventory/{{inventoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inventory",
								"{{inventoryId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üí∞ 7. GESTION TRANSACTIONS",
			"item": [
				{
					"name": "Get All Transactions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transactions?page=0&size=10&sortBy=transactionDate&sortDir=desc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "transactionDate"
								},
								{
									"key": "sortDir",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('transactionId', response.id);",
									"    console.log('‚úÖ Transaction created with ID: ' + response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"operationId\": {{operationId}},\n  \"productId\": {{productId}},\n  \"buyerId\": {{userId}},\n  \"sellerId\": {{userId}},\n  \"quantity\": 100,\n  \"unitPrice\": 250.00,\n  \"transactionLocation\": \"Miami Downtown\",\n  \"notes\": \"Test transaction via API\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transaction by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transactions/{{transactionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions",
								"{{transactionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transactions by User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transactions/user/{{userId}}?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions",
								"user",
								"{{userId}}"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transactions by Date Range",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transactions/date-range?startDate=2024-01-01T00:00:00&endDate=2024-12-31T23:59:59",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions",
								"date-range"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2024-01-01T00:00:00"
								},
								{
									"key": "endDate",
									"value": "2024-12-31T23:59:59"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sales Report",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transactions/sales-report/{{userId}}?startDate=2024-01-01T00:00:00&endDate=2024-12-31T23:59:59",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions",
								"sales-report",
								"{{userId}}"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2024-01-01T00:00:00"
								},
								{
									"key": "endDate",
									"value": "2024-12-31T23:59:59"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üí¨ 8. MESSAGERIE",
			"item": [
				{
					"name": "Send Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('messageId', response.id);",
									"    console.log('‚úÖ Message sent with ID: ' + response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"receiverId\": 1,\n  \"subject\": \"Important Meeting\",\n  \"content\": \"We need to discuss the next operation details. Please confirm your availability.\",\n  \"isEncrypted\": false,\n  \"priorityLevel\": 3,\n  \"messageType\": \"URGENT\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/messages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"messages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Message by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/messages/{{messageId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"messages",
								"{{messageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Inbox",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/messages/inbox?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"messages",
								"inbox"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sent Messages",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/messages/sent?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"messages",
								"sent"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unread Messages",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/messages/unread",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"messages",
								"unread"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark Message as Read",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/messages/{{messageId}}/read",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"messages",
								"{{messageId}}",
								"read"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ü§ñ 9. INTELLIGENCE ARTIFICIELLE (MISTRAL AI)",
			"item": [
				{
					"name": "Get Operation Suggestions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ai/operation-suggestions?territory=Miami&riskLevel=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ai",
								"operation-suggestions"
							],
							"query": [
								{
									"key": "territory",
									"value": "Miami"
								},
								{
									"key": "riskLevel",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product Market Analysis",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ai/product-analysis?productId={{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ai",
								"product-analysis"
							],
							"query": [
								{
									"key": "productId",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Risk Assessment",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ai/risk-assessment?operationId={{operationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ai",
								"risk-assessment"
							],
							"query": [
								{
									"key": "operationId",
									"value": "{{operationId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Chat with AI",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"What are the best strategies for expanding our territory safely while minimizing risks and maximizing profits?\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/ai/chat",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ai",
								"chat"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Financial Forecast",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ai/financial-forecast?months=6",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ai",
								"financial-forecast"
							],
							"query": [
								{
									"key": "months",
									"value": "6"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üè• 10. MONITORING & SANT√â",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/actuator/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Application Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/actuator/info",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"actuator",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Swagger Documentation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/swagger-ui.html",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"swagger-ui.html"
							]
						}
					},
					"response": []
				},
				{
					"name": "H2 Database Console",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/h2-console",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"h2-console"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('üöÄ Making request to:', pm.request.url.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test('Response time is acceptable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(10000);",
					"});",
					"",
					"if (pm.response.code >= 200 && pm.response.code < 300) {",
					"    pm.test('Response has correct content type', function () {",
					"        if (pm.response.headers.get('Content-Type')) {",
					"            pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"        }",
					"    });",
					"}",
					"",
					"// Log response status",
					"if (pm.response.code >= 400) {",
					"    console.log('‚ùå Error ' + pm.response.code + ': ' + pm.response.status);",
					"    if (pm.response.json && pm.response.json().message) {",
					"        console.log('Error message:', pm.response.json().message);",
					"    }",
					"} else {",
					"    console.log('‚úÖ Success ' + pm.response.code + ': ' + pm.response.status);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/api",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "productId",
			"value": "",
			"type": "string"
		},
		{
			"key": "operationId",
			"value": "",
			"type": "string"
		},
		{
			"key": "warehouseId",
			"value": "",
			"type": "string"
		},
		{
			"key": "inventoryId",
			"value": "",
			"type": "string"
		},
		{
			"key": "transactionId",
			"value": "",
			"type": "string"
		},
		{
			"key": "messageId",
			"value": "",
			"type": "string"
		}
	]
}